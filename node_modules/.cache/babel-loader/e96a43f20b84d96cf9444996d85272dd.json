{"ast":null,"code":"var _jsxFileName = \"F:\\\\Project\\\\Web\\\\react-app\\\\src\\\\components\\\\classes\\\\ClassesForm.js\";\nimport React from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport * as dataApi from '../../api/dataApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ClassesForm extends React.Component {\n  constructor(props) {\n    super(props); //state fields will always hold one object/record\n\n    this.getClasslst = id => dataApi.getClassList().then(result => {\n      this.setState({\n        fields: result.filter(a => parseInt(a.id) === id)\n      }); //item1\n    });\n\n    this.state = {\n      fields: {},\n      errors: {},\n      newfields: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    //this code will get all the classes from db and then will get the \n    //details of the single class and add the object in Fields.\n    let id = parseInt(this.props.id);\n\n    if (!isNaN(id)) {\n      try {\n        this.getClasslst(id);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  } //this is form validaion Block\n\n\n  handleSubmit(event) {\n    let fields = this.state.fields;\n    let errors = {};\n    let formIsValid = true;\n\n    if (!fields[\"cname\"]) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (!fields[\"location\"]) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (!fields[\"sal\"]) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (!fields[\"fname\"]) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    if (!fields[\"lname\"]) {\n      formIsValid = false;\n      errors[\"name\"] = \"Cannot be empty\";\n    }\n\n    return formIsValid;\n  }\n\n  contactSubmit(e) {\n    e.preventDefault();\n    const formData = this.state.fields;\n\n    if (typeof formData.id === 'undefined') {\n      //case of add\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      };\n      fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses', requestOptions).then(response => response.json());\n    } else {\n      //case of edit\n      const requestOptions = {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      };\n      fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses/' + id, requestOptions).then(response => response.json());\n    }\n  }\n\n  handleChange(field, e) {\n    let fields = this.state.fields;\n    fields[field] = e.target.value;\n    this.setState({\n      fields\n    });\n  }\n\n  render() {\n    let fields = this.state && this.state.fields ? this.state.fields : {};\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: field\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ClassesForm;","map":{"version":3,"sources":["F:/Project/Web/react-app/src/components/classes/ClassesForm.js"],"names":["React","Redirect","Link","dataApi","ClassesForm","Component","constructor","props","getClasslst","id","getClassList","then","result","setState","fields","filter","a","parseInt","state","errors","newfields","handleChange","bind","handleSubmit","componentDidMount","isNaN","error","console","log","event","formIsValid","contactSubmit","e","preventDefault","formData","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","field","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport * as dataApi from '../../api/dataApi';\r\n\r\n\r\n\r\nclass ClassesForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n       \r\n        //state fields will always hold one object/record\r\n        this.state = {\r\n            fields: {},\r\n            errors: {},\r\n            newfields: []\r\n            \r\n        }\r\n\r\n     \r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    getClasslst = (id) => dataApi.getClassList().then((result) => {\r\n        this.setState({ fields: result.filter(a => parseInt(a.id) === id) }); //item1\r\n        \r\n        \r\n    });\r\n\r\n\r\n    componentDidMount() {\r\n        //this code will get all the classes from db and then will get the \r\n        //details of the single class and add the object in Fields.\r\n\r\n        let id = parseInt(this.props.id);\r\n        if (!isNaN(id)) {\r\n            try {\r\n                this.getClasslst(id);                \r\n           \r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //this is form validaion Block\r\n    handleSubmit(event) {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n\r\n        if (!fields[\"cname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"location\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"sal\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"fname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"lname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n        return formIsValid;\r\n    }\r\n\r\n    contactSubmit(e) {\r\n        e.preventDefault();\r\n        const formData = this.state.fields;\r\n        if (typeof (formData.id) === 'undefined') {\r\n            //case of add\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData)\r\n            };\r\n\r\n            fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses', requestOptions)\r\n                .then(response => response.json());\r\n\r\n        }\r\n        else {\r\n            //case of edit\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData)\r\n            };\r\n\r\n            fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses/' + id, requestOptions)\r\n                .then(response => response.json());\r\n        }\r\n    }\r\n\r\n    handleChange(field, e) {\r\n       \r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({ fields });\r\n    }\r\n\r\n    render() {\r\n        let fields = (this.state && this.state.fields) ? this.state.fields :{}\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    (field)\r\n                }\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\nexport default ClassesForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}