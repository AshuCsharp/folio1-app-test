[{"F:\\Project\\Web\\src\\index.js":"1","F:\\Project\\Web\\src\\App.js":"2","F:\\Project\\Web\\src\\reportWebVitals.js":"3","F:\\Project\\Web\\src\\components\\common\\Header.js":"4","F:\\Project\\Web\\src\\components\\classes\\ClassesList.js":"5","F:\\Project\\Web\\src\\components\\classes\\ClassMangaement.js":"6","F:\\Project\\Web\\src\\components\\students\\StudentAdd.js":"7","F:\\Project\\Web\\src\\api\\dataApi.js":"8","F:\\Project\\Web\\src\\components\\classes\\ClassesForm.js":"9","F:\\Project\\Web\\src\\components\\students\\StudentList.js":"10"},{"size":589,"mtime":1619177970082,"results":"11","hashOfConfig":"12"},{"size":940,"mtime":1619464668447,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":251,"mtime":1619335366924,"results":"15","hashOfConfig":"12"},{"size":4783,"mtime":1619573517053,"results":"16","hashOfConfig":"12"},{"size":317,"mtime":1619347527694,"results":"17","hashOfConfig":"12"},{"size":7989,"mtime":1619573606265,"results":"18","hashOfConfig":"12"},{"size":1600,"mtime":1619489586438,"results":"19","hashOfConfig":"12"},{"size":6572,"mtime":1619568242210,"results":"20","hashOfConfig":"12"},{"size":2405,"mtime":1619573850807,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7zyut8",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Project\\Web\\src\\index.js",[],"F:\\Project\\Web\\src\\App.js",[],"F:\\Project\\Web\\src\\reportWebVitals.js",[],"F:\\Project\\Web\\src\\components\\common\\Header.js",[],"F:\\Project\\Web\\src\\components\\classes\\ClassesList.js",["44","45","46","47"],"import React from 'react';\r\nimport StudentList from '../students/StudentList';\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport * as dataApi from '../../api/dataApi';\r\n\r\n\r\nclass ClassesList extends React.Component {\r\n    constructor(prop) {\r\n        super(prop);\r\n        this.state = { error: null, items: [], rid: 0, redirectToAddClassPage: false };\r\n    }\r\n\r\n    getClasslst = () => {\r\n        dataApi.getClassList().then((result) => {\r\n            this.setState({ items: result }); //item1\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {   \r\n            this.getClasslst();            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteClass(id) {\r\n\r\n        let array = [...this.state.items]; // make a separate copy of the array\r\n        let index = array.findIndex(x => x.id === id);\r\n        if (index !== -1) {\r\n            array.splice(index, 1);\r\n            this.setState({ items: array });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleClick(id) {\r\n\r\n        this.setState({ rid: id });\r\n    }\r\n\r\n    handleEdit(id) {\r\n        alert(id);\r\n    }\r\n\r\n    handleSortClick(fldName) {\r\n\r\n        this.setState({\r\n            items: this.state.items.sort(function (a, b) {\r\n                if (a > b)\r\n                    return ('' + a.cname).localeCompare(b.cname)\r\n                if (a < b)\r\n                    return ('' + b.cname).localeCompare(a.cname)\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let { error, items } = this.state;\r\n        if (error) {\r\n            return (\r\n                <div>\r\n                    <p>\r\n                        Error: {error}\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <p>Class Data</p>\r\n                    <table className=\"table table-bordered table-sm \">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th onClick={() => this.handleSortClick(\"cname\")} style={{ cursor: 'pointer' }}> Class Name</th>\r\n                                <th onClick={() => this.handleSortClick(\"location\")} style={{ cursor: 'pointer' }}>Location</th>\r\n                                <th>Teacher Name</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                items.map(el => (\r\n                                    <tr scope=\"row\" key={el.id}>\r\n                                        <td onClick={() => this.handleClick(el.id)} style={{ cursor: 'pointer' }}>\r\n                                            {el.cname}\r\n                                        </td>\r\n                                        <td onClick={() => this.handleClick(el.id)} style={{ cursor: 'pointer' }}>\r\n                                            {el.location}\r\n                                        </td>\r\n                                        <td >\r\n                                            {el.sal} {el.lname}\r\n                                        </td>\r\n                                        <td >\r\n\r\n                                            <Link to={`classmanagement/${el.id}`} params={{ id: el.id }}>Edit</Link>\r\n\r\n\r\n                                        </td>\r\n                                        <td >\r\n                                            <button onClick={() => this.deleteClass(el.id)} className=\"btn btn-light\">\r\n                                                Delete\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            <tr scope=\"row\">\r\n                                <td colSpan=\"5\">\r\n                                    {this.state.redirectToAddClassPage && <Redirect to=\"/classmanagement\" />}\r\n                                    <button className=\"btn btn-light\" type=\"button\" onClick={() => this.setState({ redirectToAddClassPage: true })} >Add Class</button>\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr scope=\"row\">\r\n                                <td colSpan=\"5\">\r\n                                    {this.state.rid > 0 ? <StudentList rowId={this.state.rid} /> : \" \"}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default ClassesList;","F:\\Project\\Web\\src\\components\\classes\\ClassMangaement.js",[],"F:\\Project\\Web\\src\\components\\students\\StudentAdd.js",[],"F:\\Project\\Web\\src\\api\\dataApi.js",[],"F:\\Project\\Web\\src\\components\\classes\\ClassesForm.js",["48","49","50"],"import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport * as dataApi from '../../api/dataApi';\r\n\r\n\r\n\r\nclass ClassesForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //state fields will always hold one object/record\r\n        this.state = {\r\n            fields: {},\r\n            errors: {},\r\n            newfields: []\r\n\r\n        }\r\n\r\n\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    getClasslst = (id) => dataApi.getClassList().then((result) => {\r\n        this.setState(() => {\r\n\r\n            let fields = result.filter(a => parseInt(a.id) === id)\r\n\r\n            if (fields.length > 0) {\r\n                return { fields: fields[0] }\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n    });\r\n\r\n\r\n    componentDidMount() {\r\n        //this code will get all the classes from db and then will get the \r\n        //details of the single class and add the object in Fields.\r\n\r\n        let id = parseInt(this.props.id);\r\n        if (!isNaN(id)) {\r\n            try {\r\n                this.getClasslst(id);\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //this is form validaion Block\r\n    handleSubmit(event) {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n\r\n        if (!fields[\"cname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"location\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"sal\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"fname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"lname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n        return formIsValid;\r\n    }\r\n\r\n    contactSubmit(e) {\r\n      \r\n        e.preventDefault();\r\n        let id = parseInt(this.props.id);\r\n        const formData = this.state.fields;\r\n        if (typeof (formData.id) === 'undefined') {\r\n          if (this.handleSubmit()) {\r\n            //case of add\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData)\r\n            };         \r\n\r\n            fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses', requestOptions)\r\n                .then(response => response.json())\r\n                .then(json => console.log(json));\r\n\r\n                const redirectToReferrer = this.state.redirectToReferrer;\r\n                if (redirectToReferrer) {\r\n                   return <Redirect to=\"/home\" />\r\n                }\r\n          }else{\r\n            alert(JSON.stringify(this.state.errors));\r\n          }      \r\n\r\n        }\r\n        else {\r\n          if (this.handleSubmit()) {\r\n            //case of edit\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData)\r\n            };\r\n\r\n            fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses/' + id, requestOptions)\r\n                .then(response => response.json())\r\n                .then(json => console.log(json));\r\n          }else{\r\n            alert(JSON.stringify(this.state.errors));\r\n          }\r\n        }\r\n    }\r\n\r\n    handleChange(field, e) {\r\n\r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({ fields });\r\n    }\r\n\r\n    render() {\r\n        //let fields = (this.state && this.state.fields) ? this.state.fields : []\r\n\r\n        return (\r\n\r\n            <form onSubmit={this.contactSubmit.bind(this)}>\r\n                <table className=\"table table-bordered table-sm \">\r\n                    <tr>\r\n                        <td><span className=\"required-field\">Class Name:</span></td>\r\n\r\n                        <td><input size=\"30\" type=\"text\" name=\"cname\" onChange={this.handleChange.bind(this, \"cname\")} value={this.state.fields[\"cname\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><span className=\"required-field\">Location:</span></td>\r\n                        <td><input size=\"30\" type=\"text\" name=\"location\" onChange={this.handleChange.bind(this, \"location\")} value={this.state.fields[\"location\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <span className=\"required-field\">Select</span>\r\n                        </td>\r\n                        <td>\r\n                            <select name=\"sal\" onChange={this.handleChange.bind(this, \"sal\")}>\r\n                                <option value=\"Select\">Select</option>\r\n                                <option selected={this.state.fields[\"sal\"] == \"Mr\"} value=\"Mr\">Mr</option>\r\n                                <option selected={this.state.fields[\"sal\"] == \"Miss\"} value=\"Miss\">Miss</option>\r\n                                <option selected={this.state.fields[\"sal\"] == \"Dr\"} value=\"Dr\">Dr</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><span className=\"required-field\">First Name:</span></td>\r\n                        <td><input size=\"30\" type=\"text\" name=\"fname\" onChange={this.handleChange.bind(this, \"fname\")} value={this.state.fields[\"fname\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><span className=\"required-field\">Last Name:</span></td>\r\n                        <td><input size=\"30\" type=\"text\" name=\"lname\" onChange={this.handleChange.bind(this, \"lname\")} value={this.state.fields[\"lname\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">\r\n                            <input type=\"submit\" value=\"Submit\" />&nbsp;&nbsp;\r\n\r\n                                    <Link to=\"/\" className=\"btn btn-primary\">Back to Main</Link>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </form>\r\n\r\n\r\n        );\r\n    }\r\n}\r\nexport default ClassesForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","F:\\Project\\Web\\src\\components\\students\\StudentList.js",[],{"ruleId":"51","severity":1,"message":"52","line":52,"column":42,"nodeType":"53","messageId":"54","endLine":52,"endColumn":51},{"ruleId":"55","severity":1,"message":"56","line":91,"column":41,"nodeType":"57","endLine":91,"endColumn":52},{"ruleId":"55","severity":1,"message":"56","line":115,"column":33,"nodeType":"57","endLine":115,"endColumn":44},{"ruleId":"55","severity":1,"message":"56","line":122,"column":33,"nodeType":"57","endLine":122,"endColumn":44},{"ruleId":"58","severity":1,"message":"59","line":169,"column":76,"nodeType":"60","messageId":"61","endLine":169,"endColumn":78},{"ruleId":"58","severity":1,"message":"59","line":170,"column":76,"nodeType":"60","messageId":"61","endLine":170,"endColumn":78},{"ruleId":"58","severity":1,"message":"59","line":171,"column":76,"nodeType":"60","messageId":"61","endLine":171,"endColumn":78},"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]