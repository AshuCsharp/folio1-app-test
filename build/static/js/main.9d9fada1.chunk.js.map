{"version":3,"sources":["components/common/Header.js","api/dataApi.js","components/students/StudentList.js","components/classes/ClassesList.js","components/classes/ClassesForm.js","components/classes/ClassMangaement.js","components/students/StudentAdd.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","getClassList","a","fetch","response","json","result","console","log","getStudentList","StudentList","props","state","error","isLoaded","items","id","array","this","index","findIndex","x","splice","setState","dataApi","then","length","to","colSpan","filter","student","folioClassId","parseInt","rowId","map","el","fname","lname","age","gpa","params","onClick","deleteStudent","React","Component","ClassesList","prop","getClasslst","rid","redirectToAddClassPage","alert","fldName","sort","b","cname","localeCompare","handleSortClick","style","cursor","scope","handleClick","location","sal","deleteClass","type","ClassesForm","fields","errors","newfields","handleChange","bind","handleSubmit","isNaN","event","formIsValid","e","preventDefault","formData","requestOptions","method","headers","body","JSON","stringify","redirectToReferrer","field","target","value","onSubmit","contactSubmit","size","name","onChange","selected","ClassManagement","match","StudentAdd","lnamedata","classList","handleNameCondition","find","element","toUpperCase","_state","classOptions","pattern","inputmode","step","App","exact","path","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d9fada1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"box\">\r\n            <div>\r\n                <h1>  folio1 - React Test </h1>               \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Header;","\r\nexport const getClassList = async () => {\r\n    try {\r\n        //http://localhost:55217/api/folioclasses don't forget to add item1\r\n        //https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses don't forget to remove item1\r\n        const response = await fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses');\r\n        const result = await response.json();\r\n        return result;\r\n\r\n    } catch (error) {\r\n\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getStudentList = async () => {\r\n    try {\r\n        //http://localhost:55217/api/Students  don't forget to add item1\r\n        //https://6079395e460a6600174fb472.mockapi.io/api/v1/Students don't forget to remove item1\r\n       \r\n        const response = await fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/Students');\r\n        const result = await response.json();\r\n        return result;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const saveStudent = async (requestOptions) => {\r\n    try {\r\n        const response = await fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/Students', requestOptions);\r\n        const result = await response.json();\r\n        return result;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const editStudent = async (requestOptions, id) => {\r\n    try {\r\n        const response = await fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/Students/' + id,)\r\n        const result = await response.json();\r\n        return result;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as dataApi from '../../api/dataApi';\r\n\r\nclass StudentList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, isLoaded: false, items: [] };\r\n  }\r\n\r\n\r\n  deleteStudent(id) {\r\n    let array = [...this.state.items]; // make a separate copy of the array\r\n    let index = array.findIndex(x => x.id === id);\r\n    if (index !== -1) {\r\n      array.splice(index, 1);\r\n      this.setState({ items: array });\r\n    }\r\n  }\r\n\r\n  componentDidCatch() {\r\n    try {\r\n      dataApi.getStudentList().then((result) => {\r\n        this.setState({ items: result }); //item1\r\n      });\r\n    } catch (error) {\r\n      this.setState({ error: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.state;\r\n\r\n    if (this.state.items.length === 0) {\r\n      return (\r\n        <div>\r\n          <Link to=\"/StudentAdd\" className=\"btn btn-light\">Add Student</Link>\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <table id=\"gpamax\" className=\"table table-bordered table-sm\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <td colSpan=\"5\">Student Data</td>\r\n            </tr>\r\n            <tr>\r\n              <th> Student Name</th>\r\n              <th>Age</th>\r\n              <th>GPA</th>\r\n              <th></th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n\r\n\r\n            {\r\n              items.length === 0 ? <p> Blank</p> :\r\n\r\n                items.filter((student) => { return student.folioClassId === parseInt(this.props.rowId) }).map(el => (\r\n\r\n                  <tr key={el.id}>\r\n                    <td>{el.fname} {el.lname}</td>\r\n                    <td>{el.age}</td>\r\n                    <td id=\"tdgpa\">{el.gpa}</td>\r\n                    <td>  <Link to={`studentadd/${el.id}`} params={{ id: el.id }}>Edit</Link></td>\r\n                    <td>\r\n                      <button onClick={() => this.deleteStudent(el.id)} className=\"btn btn-light\">Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n            }\r\n            <tr>\r\n              <td colSpan=\"5\">\r\n                <Link to=\"/StudentAdd\" className=\"btn btn-light\">Add</Link>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default StudentList;","import React from 'react';\r\nimport StudentList from '../students/StudentList';\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport * as dataApi from '../../api/dataApi';\r\n\r\n\r\nclass ClassesList extends React.Component {\r\n    constructor(prop) {\r\n        super(prop);\r\n        this.state = { error: null, items: [], rid: 0, redirectToAddClassPage: false };\r\n    }\r\n\r\n    getClasslst = () => {\r\n        dataApi.getClassList().then((result) => {\r\n            this.setState({ items: result }); //item1\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {   \r\n            this.getClasslst();            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteClass(id) {\r\n\r\n        let array = [...this.state.items]; // make a separate copy of the array\r\n        let index = array.findIndex(x => x.id === id);\r\n        if (index !== -1) {\r\n            array.splice(index, 1);\r\n            this.setState({ items: array });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleClick(id) {\r\n\r\n        this.setState({ rid: id });\r\n    }\r\n\r\n    handleEdit(id) {\r\n        alert(id);\r\n    }\r\n\r\n    handleSortClick(fldName) {\r\n\r\n        this.setState({\r\n            items: this.state.items.sort(function (a, b) {\r\n                if (a > b)\r\n                    return ('' + a.cname).localeCompare(b.cname)\r\n                if (a < b)\r\n                    return ('' + b.cname).localeCompare(a.cname)\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let { error, items } = this.state;\r\n        if (error) {\r\n            return (\r\n                <div>\r\n                    <p>\r\n                        Error: {error}\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <p>Class Data</p>\r\n                    <table className=\"table table-bordered table-sm \">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th onClick={() => this.handleSortClick(\"cname\")} style={{ cursor: 'pointer' }}> Class Name</th>\r\n                                <th onClick={() => this.handleSortClick(\"location\")} style={{ cursor: 'pointer' }}>Location</th>\r\n                                <th>Teacher Name</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                items.map(el => (\r\n                                    <tr scope=\"row\" key={el.id}>\r\n                                        <td onClick={() => this.handleClick(el.id)} style={{ cursor: 'pointer' }}>\r\n                                            {el.cname}\r\n                                        </td>\r\n                                        <td onClick={() => this.handleClick(el.id)} style={{ cursor: 'pointer' }}>\r\n                                            {el.location}\r\n                                        </td>\r\n                                        <td >\r\n                                            {el.sal} {el.lname}\r\n                                        </td>\r\n                                        <td >\r\n\r\n                                            <Link to={`classmanagement/${el.id}`} params={{ id: el.id }}>Edit</Link>\r\n\r\n\r\n                                        </td>\r\n                                        <td >\r\n                                            <button onClick={() => this.deleteClass(el.id)} className=\"btn btn-light\">\r\n                                                Delete\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            <tr scope=\"row\">\r\n                                <td colSpan=\"5\">\r\n                                    {this.state.redirectToAddClassPage && <Redirect to=\"/classmanagement\" />}\r\n                                    <button className=\"btn btn-light\" type=\"button\" onClick={() => this.setState({ redirectToAddClassPage: true })} >Add Class</button>\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr scope=\"row\">\r\n                                <td colSpan=\"5\">\r\n                                    {this.state.rid > 0 ? <StudentList rowId={this.state.rid} /> : \" \"}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default ClassesList;","import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport * as dataApi from '../../api/dataApi';\r\n\r\n\r\n\r\nclass ClassesForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //state fields will always hold one object/record\r\n        this.state = {\r\n            fields: {},\r\n            errors: {},\r\n            newfields: []\r\n\r\n        }\r\n\r\n\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    getClasslst = (id) => dataApi.getClassList().then((result) => {\r\n        this.setState(() => {\r\n\r\n            let fields = result.filter(a => parseInt(a.id) === id)\r\n\r\n            if (fields.length > 0) {\r\n                return { fields: fields[0] }\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n    });\r\n\r\n\r\n    componentDidMount() {\r\n        //this code will get all the classes from db and then will get the \r\n        //details of the single class and add the object in Fields.\r\n\r\n        let id = parseInt(this.props.id);\r\n        if (!isNaN(id)) {\r\n            try {\r\n                this.getClasslst(id);\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //this is form validaion Block\r\n    handleSubmit(event) {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n\r\n        if (!fields[\"cname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"location\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"sal\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"fname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"lname\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n        return formIsValid;\r\n    }\r\n\r\n    contactSubmit(e) {\r\n      \r\n        e.preventDefault();\r\n        let id = parseInt(this.props.id);\r\n        const formData = this.state.fields;\r\n        if (typeof (formData.id) === 'undefined') {\r\n          if (this.handleSubmit()) {\r\n            //case of add\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData)\r\n            };         \r\n\r\n            fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses', requestOptions)\r\n                .then(response => response.json())\r\n                .then(json => console.log(json));\r\n\r\n                const redirectToReferrer = this.state.redirectToReferrer;\r\n                if (redirectToReferrer) {\r\n                   return <Redirect to=\"/home\" />\r\n                }\r\n          }else{\r\n            alert(JSON.stringify(this.state.errors));\r\n          }      \r\n\r\n        }\r\n        else {\r\n          if (this.handleSubmit()) {\r\n            //case of edit\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData)\r\n            };\r\n\r\n            fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/folioclasses/' + id, requestOptions)\r\n                .then(response => response.json())\r\n                .then(json => console.log(json));\r\n          }else{\r\n            alert(JSON.stringify(this.state.errors));\r\n          }\r\n        }\r\n    }\r\n\r\n    handleChange(field, e) {\r\n\r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({ fields });\r\n    }\r\n\r\n    render() {\r\n        //let fields = (this.state && this.state.fields) ? this.state.fields : []\r\n\r\n        return (\r\n\r\n            <form onSubmit={this.contactSubmit.bind(this)}>\r\n                <table className=\"table table-bordered table-sm \">\r\n                    <tr>\r\n                        <td><span className=\"required-field\">Class Name:</span></td>\r\n\r\n                        <td><input size=\"30\" type=\"text\" name=\"cname\" onChange={this.handleChange.bind(this, \"cname\")} value={this.state.fields[\"cname\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><span className=\"required-field\">Location:</span></td>\r\n                        <td><input size=\"30\" type=\"text\" name=\"location\" onChange={this.handleChange.bind(this, \"location\")} value={this.state.fields[\"location\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <span className=\"required-field\">Select</span>\r\n                        </td>\r\n                        <td>\r\n                            <select name=\"sal\" onChange={this.handleChange.bind(this, \"sal\")}>\r\n                                <option value=\"Select\">Select</option>\r\n                                <option selected={this.state.fields[\"sal\"] == \"Mr\"} value=\"Mr\">Mr</option>\r\n                                <option selected={this.state.fields[\"sal\"] == \"Miss\"} value=\"Miss\">Miss</option>\r\n                                <option selected={this.state.fields[\"sal\"] == \"Dr\"} value=\"Dr\">Dr</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><span className=\"required-field\">First Name:</span></td>\r\n                        <td><input size=\"30\" type=\"text\" name=\"fname\" onChange={this.handleChange.bind(this, \"fname\")} value={this.state.fields[\"fname\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><span className=\"required-field\">Last Name:</span></td>\r\n                        <td><input size=\"30\" type=\"text\" name=\"lname\" onChange={this.handleChange.bind(this, \"lname\")} value={this.state.fields[\"lname\"]}></input></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">\r\n                            <input type=\"submit\" value=\"Submit\" />&nbsp;&nbsp;\r\n\r\n                                    <Link to=\"/\" className=\"btn btn-primary\">Back to Main</Link>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </form>\r\n\r\n\r\n        );\r\n    }\r\n}\r\nexport default ClassesForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ClassesForm from './ClassesForm';\r\n\r\nclass ClassManagement extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <ClassesForm id={this.props.match.params.id} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassManagement;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as dataApi from '../../api/dataApi';\r\n\r\n\r\nclass StudentAdd extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // state will hold the student data for add and edit, lnamedata is used to \r\n        //match the unique last name.\r\n\r\n        this.state = {\r\n            fields: {},\r\n            errors: {},\r\n            lnamedata: {},\r\n            classList: []\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleNameCondition = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        let id = parseInt(this.props.match.params.id);\r\n        //lnamedata will hold the student data \r\n\r\n        dataApi.getStudentList().then((result) => {\r\n            this.setState({ lnamedata: this.result }); //.item1\r\n        });\r\n\r\n        dataApi.getClassList().then((result) => {\r\n            this.setState({ classList: this.result }); //.item1\r\n        });\r\n\r\n        if (!isNaN(id)) {\r\n            //this is the case of edit\r\n            try {\r\n                this.setState({ fields: this.state.lnamedata.find(element => element.id === id) }); //item1 need to me removed. result wil hold the object that user is modifying \r\n            } catch (error) {\r\n                    console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({ fields });\r\n    }\r\n\r\n\r\n    //this is where form validation checks\r\n    handleSubmit(event) {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n\r\n        if (!fields[\"fname\"]) {\r\n            formIsValid = false;\r\n            errors[\"fname\"] = \"Cannot be empty\";\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const handleNameCondition = () => {\r\n            if (fields[\"lname\"]) {\r\n                // this.state.lnamedata.map(a => console.log(a.lname.toUpperCase()))\r\n\r\n                let id = parseInt(this.props.match.params.id);\r\n                if (!isNaN(id)) {\r\n                    /* eslint-disable */\r\n                    let oldlname = this.state.lnamedata.find(element => parseInt(element.id) === id)\r\n                    if (oldlname.lname.toUpperCase() !== fields[\"lname\"].toUpperCase()) {\r\n                        if (this.state.lnamedata.find(e => { (e.lname.toUpperCase()) === fields[\"lname\"].toUpperCase() })) {\r\n\r\n\r\n                            formIsValid = false;\r\n                            //errors[\"lname\"] = \"Last name can't be similar\";\r\n                        }\r\n                    }\r\n                } else {\r\n                    /* eslint-disable */\r\n                    if (typeof (state.lnamedata) !== 'undefined') {\r\n                        if (this.state.lnamedata.find(e => { (e.lname.toUpperCase()) === fields[\"lname\"].toUpperCase() })) {\r\n                            formIsValid = false;\r\n                            errors[\"lname\"] = \"Last name can't be similar\";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n        if (!fields[\"lname\"]) {\r\n            formIsValid = false;\r\n            errors[\"lname\"] = \"Cannot be empty\";\r\n        } else {\r\n            handleNameCondition();\r\n        }\r\n\r\n\r\n        if (!fields[\"age\"]) {\r\n            formIsValid = false;\r\n            errors[\"age\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (!fields[\"gpa\"]) {\r\n            formIsValid = false;\r\n            errors[\"gpa\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        if (fields[\"folioClassId\"] === 0) {\r\n            formIsValid = false;\r\n            errors[\"folioClassId\"] = \"Cannot be empty\";\r\n        }\r\n\r\n        this.setState({ errors: errors });\r\n        return formIsValid;\r\n\r\n    }\r\n\r\n    contactSubmit(e) {\r\n        e.preventDefault();\r\n        const formData = this.state.fields;\r\n        if (typeof (formData.id) === 'undefined') {\r\n            if (this.handleSubmit()) {\r\n                //case of add\r\n                const requestOptions = {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ formData })\r\n                };\r\n\r\n\r\n                fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/Students', requestOptions)\r\n                    .then(response => response.json());\r\n            } else {\r\n                alert(JSON.stringify(this.state.errors));\r\n            }\r\n        }\r\n        else {\r\n            //case of edit\r\n            let id = parseInt(this.props.match.params.id);\r\n            if (this.handleSubmit()) {\r\n                const requestOptions = {\r\n                    method: 'PUT',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ formData })\r\n                };\r\n\r\n\r\n                fetch('https://6079395e460a6600174fb472.mockapi.io/api/v1/Students/' + id, requestOptions)\r\n                    .then(response => response.json());\r\n            } else {\r\n                alert(JSON.stringify(this.state.errors));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let _state = this.state;\r\n        const classOptions = this.state.classList.map(function (element) {\r\n            return <option value={element.id} selected={element.id == _state.fields[\"folioClassId\"]} >{element.cname}</option>;\r\n        });\r\n        return (\r\n\r\n            <form onSubmit={this.contactSubmit.bind(this)}>\r\n                <table className=\"table table-bordered table-sm \">\r\n                    <tr>\r\n                        <td>\r\n                            <span className=\"required-field\">First Name</span>\r\n                        </td>\r\n                        <td>\r\n                            <input size=\"30\" type=\"text\" name=\"fname\" onChange={this.handleChange.bind(this, \"fname\")} value={this.state.fields[\"fname\"]} />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <span className=\"required-field\">Last Name</span>\r\n                        </td>\r\n                        <td>\r\n                            <input size=\"30\" type=\"text\" name=\"lname\" onChange={this.handleChange.bind(this, \"lname\")} value={this.state.fields[\"lname\"]} />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td> <span className=\"required-field\">Age</span></td>\r\n                        <td><input type=\"number\" pattern=\"[0-9]*\" inputmode=\"numeric\" name=\"age\" onChange={this.handleChange.bind(this, \"age\")} value={this.state.fields[\"age\"]} /></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><span>GPA</span></td>\r\n                        <td><input type=\"number\" step=\"0.01\" inputmode=\"numeric\" name=\"gpa\" onChange={this.handleChange.bind(this, \"gpa\")} value={this.state.fields[\"gpa\"]} /></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <span className=\"required-field\">Class Name</span>\r\n                        </td>\r\n                        <td>\r\n                            <select name=\"folioClassId\" onChange={this.handleChange.bind(this, \"classList\")}   >\r\n                                <option value=\"0\">Select</option>\r\n                                {classOptions}\r\n\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <button>Add Student</button>&nbsp;&nbsp; <Link to=\"/\" className=\"btn btn-primary\">Back to Main</Link>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </form >\r\n        );\r\n    }\r\n}\r\n\r\nexport default StudentAdd;\r\n","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Header from './components/common/Header';\nimport ClassesList from './components/classes/ClassesList';\nimport ClassManagement from './components/classes/ClassMangaement';\nimport StudentAdd from './components/students/StudentAdd';\n\n\nfunction App({ match }) {\n  return (\n    <div>\n      <Header />\n      <Switch>       \n          <Route exact path=\"/\" component={ClassesList} />     \n          <Route path=\"/ClassManagement/:id\" render={\n            ({ match }) => <ClassManagement match={match} />\n          } />\n          <Route path=\"/ClassManagement\" component={ClassManagement} />\n          <Route path=\"/StudentAdd/:id\" render={\n            ({ match }) => <StudentAdd match={match} />\n          } />\n          \n          <Route path=\"/StudentAdd\" component={StudentAdd} />     \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}